<?php

namespace App\Controller\Marketing;

use App\Controller\AppController;
use App\Form\CustomRegionSelectionForm;
use App\Lib\Geo;
use App\Lib\GoogleParse\GoogleParse;
use App\Lib\Map;
use App\Lib\PolylineEncoder;
use App\Lib\Utils;
use App\Lib\Wizard;
use App\Model\Entity\Campaign;
use Aws\S3\S3Client;
use Cake\Core\Configure;
use Cake\Datasource\ConnectionManager;
use Cake\Event\Event;
use Cake\Filesystem\File;
use Cake\Filesystem\Folder;
use Cake\I18n\Date;
use Cake\Network\Exception\BadRequestException;
use Cake\Network\Exception\NotFoundException;
use Cake\ORM\TableRegistry;
use Cake\Utility\Hash;
use joshtronic\GooglePlaces;
use League\CLImate\TerminalObject\Basic\Tab;

/**
 * Content Controller
 *
 * @property \App\Model\Table\FloorplansLibraryTable $FloorplansLibrary
 * @property \App\Model\Table\CampaignContentTable $CampaignContent
 * @property \App\Model\Table\CustomersTable $Customers
 *
 */
class FloorplansController extends AppController
{

    /**
     * Settings for pagination.
     *
     * Used to pre-configure pagination preferences for the various
     * tables your controller will be paginating.
     *
     * @var array
     * @see \Cake\Controller\Component\PaginatorComponent
     */
    public $paginate = [
        'sortWhitelist' => [
            'CampaignContent.id',
            'CampaignContent.customer.name',
            'CampaignContent.users.profiles.last_name',
            'CampaignContent.name',
            'CampaignContent.layout',
            'CampaignContent.sub_layout',
            'CampaignContent.product_name',
            'CampaignContent.product_price',
            'CampaignContent.interaction_method',
            'CampaignContent.created',
            'CampaignContent.modified'
        ],
        'contain' => [
            'Customers',
            'Users.Profiles',
            'MediaVideos',
            'MediaImages',
            'CampaignContentButtons.Videos',
            'CampaignContentActions.Videos'
        ],
        'order' => ['CampaignContent.created' => 'desc'],
    ];

    /**
     * This object's primary model class name. Should be a plural form.
     * CakePHP will not inflect the name.
     *
     * Example: For an object named 'Comments', the modelClass would be 'Comments'.
     * Plugin classes should use `Plugin.Comments` style names to correctly load
     * models from the correct plugin.
     *
     * @var string
     */
    public $modelClass = 'CampaignContent';

    protected $Wizard;

    public $helpers = [
        'MobilePreview'
    ];

    protected $_exemptions = [
        'ajax',
        'preview',
        'uploadFloorplans',
        'editFloorplansLibrary',
        'loadVideoPreview',
        'createCroppedImage',
        'deleteFloorplansLibrary',
        'loadFloorplans',
        'createContent',
        'editContent',
        'croppingTool'
    ];

    protected $_s3;

    /**
     * @param Event $event
     * @return \Cake\Network\Response|null|void
     */
    public function beforeFilter(Event $event)
    {

        if (in_array($this->request->action, $this->_exemptions)) {
            $this->Security->config('validatePost', false);
            $this->Security->config('csrfCheck', false);
        }

        $this->Security->config('unlockedActions', ['createContent, editContent']);

        parent::beforeFilter($event); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        $this->paginate['limit'] = Configure::read('Settings.number_records_per_page');
        $this->paginate['conditions'] = [
            'CampaignContent.user_id' => $this->Auth->user('id'),
        ];

        if ($this->AuthUser->hasRole(AUTH_ROLE_ADMINISTRATOR)) {
            $customer_id = $this->request->getQuery('customer_id');
            if ($customer_id) {
                $this->paginate['conditions']['CampaignContent.customer_id'] = $customer_id;
                unset($this->paginate['conditions']['CampaignContent.user_id']);
            }
        } else {
            $this->paginate['conditions']['CampaignContent.customer_id IN'] = $this->request->getSession()->read('multiple_customers');
        }

        $user_id = $this->request->getQuery('user_id');
        if ($user_id) {
            $this->paginate['conditions']['CampaignContent.user_id'] = $user_id;
        }

        $this->set('contents', $this->paginate());
        $this->set('_serialize', ['contents']);
    }

    public function company()
    {
        $this->paginate['limit'] = Configure::read('Settings.number_records_per_page');
        $this->paginate['conditions'] = ['CampaignContent.customer_id IN' => $this->request->getSession()->read('multiple_customers')];

        $this->set('contents', $this->paginate());
        $this->set('_serialize', ['contents']);

        $this->viewBuilder()->setTemplate('index');
    }

    /**
     * Content preview function.
     *
     * @param int $contentId Content item to generate preview for.
     * @return \Cake\Network\Response
     */
    public function preview($id = null)
    {
        $conditions = [
            'CampaignContent.id' => $id,
        ];

        $campaign = $this->CampaignContent->find()
            ->where($conditions)
            ->contain([
                'MediaImages',
                'CampaignContentButtons.Videos',
                'CampaignContentActions.Videos',
            ])
            ->first();

        $this->set(compact('campaign'));
    }

    public function modal()
    {
        $conditions = [
            'CampaignContent.customer_id' => $this->Auth->user('customer_id'),
        ];

        $totalCustomerContentCount = $this->CampaignContent->find()
            ->where($conditions)
            ->contain($this->paginate['contain'])
            ->contain('Surveys.SurveyQuestions')
            ->count();

        // Base query, limit results to the company content.
        $query = $this->CampaignContent->find()
            ->where($conditions)
            ->contain($this->paginate['contain'])
            ->contain('Surveys.SurveyQuestions');

        // Filter the content to the current user.
        $currentUserOnly = (bool)$this->request->getQuery('current_user_only', false);
        if ($currentUserOnly) {
            $query->where([
                'CampaignContent.user_id' => $this->Auth->user('id')
            ]);
        }

        // Filter the content by the searcheed content.
        $keywords = $this->request->getQuery('keywords', '');
        if (!empty($keywords)) {
            $query->andWhere(function ($q) use ($keywords) {
                return $q->or_([
                    'CampaignContent.name LIKE' => '%' . $keywords . '%',
                    'CampaignContent.description LIKE' => '%' . $keywords . '%',
                    'CampaignContent.header_title LIKE' => '%' . $keywords . '%',
                    'CampaignContent.video_description_text LIKE' => '%' . $keywords . '%',
                    'CampaignContent.notification_message LIKE' => '%' . $keywords . '%',
                    'CampaignContent.product_name LIKE' => '%' . $keywords . '%',
                    'CampaignContent.product_description LIKE' => '%' . $keywords . '%',
                ]);
            });
        }

        $totalFilterContentCount = $query->count();

        $this->set('content', $this->paginate($query, ['limit' => 8]));
        $this->set(compact('totalCustomerContentCount', 'totalFilterContentCount', 'keywords', 'currentUserOnly'));
    }

    public function loadVideoPreview()
    {
        $this->FloorplansLibrary = TableRegistry::get('FloorplansLibrary');

        if ($this->request->is('ajax')) {
            $this->viewBuilder()->layout('json_payload');
        } else {
            return false;
        }

        $libraryItem = $this->FloorplansLibrary->find()
            ->where(
                [
                    'FloorplansLibrary.id' => $this->request->data['media_id'],
                    'FloorplansLibrary.media_type' => 'VIDEO',
                    'FloorplansLibrary.media_status' => 'COMPLETE'
                ]
            )
            ->contain(
                false
            );

        if ($libraryItem->isEmpty()) {
            return $this->render('modal_error');
        } else {
            $libraryItem = $libraryItem->first();
            $this->set(compact('libraryItem'));
        }

        $extras = [
            'path' => $libraryItem->encoded_file,
            'thumb' => $libraryItem->video_thumb,
            'sthumb' => $libraryItem->video_sthumb,
            'title' => $libraryItem->title,
            'desc' => $libraryItem->description,
            'w' => $libraryItem->width,
            'h' => $libraryItem->height,
            'length' => $libraryItem->duration
        ];

        $this->set(compact('extras'));

    }

    public function croppingTool()
    {

        if ($this->request->is('ajax')) {
            $this->viewBuilder()->layout('json_payload');
        } else {
            return false;
        }

        $this->FloorplansLibrary = TableRegistry::get('FloorplansLibrary');

        $libraryItem = $this->FloorplansLibrary->find()
            ->where(
                [
                    'FloorplansLibrary.id' => $this->request->data['floorplan_id'],
                    'FloorplansLibrary.parent_id IS' => NULL,
                    'FloorplansLibrary.is_edited_image' => 0
                ]
            )
            ->contain(
                [
                    'FloorplansLibraryEdits'
                ]
            );

        if ($libraryItem->isEmpty()) {
            return $this->render('modal_error');
        } else {
            $libraryItem = $libraryItem->first();
            $this->set(compact('libraryItem'));
        }

    }

    public function createCroppedImage()
    {
        $mediaId = $this->request->data['media_id'];
        $this->FloorplansLibrary = TableRegistry::get('FloorplansLibrary');
        $r = Utils::generateNumber($this->request->data, 10);

        $i = [
            'x' => $this->request->data['img_crop_x'],
            'y' => $this->request->data['img_crop_y'],
            'w' => $this->request->data['img_crop_w'],
            'h' => $this->request->data['img_crop_h'],
            'r' => $this->request->data['img_crop_r'],
            'sx' => $this->request->data['img_crop_sx'],
            'sy' => $this->request->data['img_crop_sy']
        ];

        $libraryItem = $this->FloorplansLibrary->find()
            ->where(['FloorplansLibrary.id' => $floorplansId])
            ->contain(
                [
                    'FloorplansLibraryEdits'
                ]
            )
            ->first();

        $_s3 = new S3Client(
            [
                'version' => 'latest',
                'region' => 'us-west-2',
                'credentials' => [
                    'key' => Configure::read('Settings.aws_s3_key'),
                    'secret' => Configure::read('Settings.aws_s3_secret')
                ]
            ]
        );

        $path = HTML_DIR . 'data/temp/';
        $ext_tmp = explode('.', $libraryItem->filename);
        $ext = end($ext_tmp);
        $file = $this->Auth->user('id') . '.' . $r . md5(serialize($this->request->data)) . '.' . $ext;
        $fp = $path . $file;

        $obj = $_s3->getObject(
            [
                'Bucket' => Configure::read('Settings.floorplans_container'),
                'Key' => $libraryItem->path . $libraryItem->filename,
                'SaveAs' => $fp
            ]
        );


        $data = [
            'name' => $file,
            'tmp_name' => $fp,
            'type' => 'image/jpeg',
            'error' => 0,
            'size' => filesize($fp)
        ];


        $this->FloorplansLibrary->removeBehavior('Josegonzalez/Upload.Upload');

        $this->FloorplansLibrary->bindForEdits($floorplansId, $i);


        $tmpEntityData = ['filename' => $data, 'customer_id' => $this->Auth->user('customer_id')];
        $entity = $this->FloorplansLibrary->newEntity($tmpEntityData);

        Utils::getId($entity);

        $save = $this->FloorplansLibrary->save($entity);
        $s[] = [$save, $entity];

        if ($save) {
            echo json_encode(
                [
                    'code' => 200,
                    'text' => 'Image cropped successfully',
                    'parent_id' => $entity->parent_id,
                    'id' => $entity->id,
                    'path' => 'https://' . Configure::read('Settings.floorplans_container') . '/' . $entity->path . $entity->filename,
                    'tpath' => 'https://' . Configure::read('Settings.floorplans_container') . '/' . $entity->path . 'thumbnail-' . $entity->filename
                ]
            );
        } else {
            echo json_encode(
                [
                    'code' => 135,
                    'text' => 'There was an error cropping the image'
                ]
            );
        }

        exit;

    }

    public function deleteFloorplansLibrary()
    {
        $this->Floorplans = TableRegistry::get('FloorplansLibrary');
        $this->Customers = TableRegistry::get('Customers');

        if ($this->request->is(['post', 'put'])) {
            if (!empty($this->request->data['action']) && $this->request->data['action'] === 'DELETE_IMAGES') {

                $this->_s3 = new S3Client(
                    [
                        'version' => 'latest',
                        'region' => 'us-west-2',
                        'credentials' => [
                            'key' => Configure::read('Settings.aws_s3_key'),
                            'secret' => Configure::read('Settings.aws_s3_secret')
                        ]
                    ]
                );


                $ids = $this->request->query['ids'];

                $ids = array_map(function ($x) {
                    return (int)$x;
                }, $ids);

                $customer = $this->Customers->find()
                    ->where(
                        [
                            'id' => $this->Auth->user('customer_id')
                        ]
                    )->contain(
                        [
                            'FloorplansLibrary' => function ($q) use ($ids) {
                                return $q->where(
                                    function ($exp, $q) use ($ids) {
                                        return $exp->in('id', $ids);
                                    }
                                );
                            }
                        ]
                    )
                    ->first();

                $k = 0;

                foreach ($customer->floorplans_library as $libraryItem) {
                    $bucket = Configure::read('Settings.floorplans_container');
                    $key = $libraryItem->path . $libraryItem->filename;
                    $tkey = $libraryItem->path . 'thumbnail-' . $libraryItem->filename;
                    $this->_s3->deleteObject(
                        [
                            'Bucket' => $bucket,
                            'Key' => $key
                        ]
                    );
                    $this->_s3->deleteObject(
                        [
                            'Bucket' => $bucket,
                            'Key' => $tkey
                        ]
                    );

                    $this->FloorplansLibrary->delete($libraryItem);
                    $k++;
                }

                if ($k) {

                    $this->Flash->calloutFlash(
                        "Deleted {$k} images successfully - any edited versions will have been deleted also.", [
                        'key' => 'authError',
                        'clear' => true,
                        'params' => [
                            'heading' => 'Images Deleted',
                            'class' => 'callout-success',
                            'fa' => 'check'
                        ]
                    ]);

                    return $this->redirect('/marketing/floorplans/floorplans_library');

                } else {

                    $this->Flash->calloutFlash(
                        'Error - There was an error deleting your images.', [
                        'key' => 'authError',
                        'clear' => true,
                        'params' => [
                            'heading' => 'Error',
                            'class' => 'callout-danger',
                            'fa' => 'excl'
                        ]
                    ]);

                    $this->set(compact('customer'));

                }

            } elseif (!empty($this->request->data['ids'])) {
                $q = http_build_query($this->request->data);
                return $this->redirect('/marketing/floorplans/deleteFloorplansLibrary?' . $q);

            } else {
                $this->Flash->calloutFlash(
                    'Error - You must select at least one image to perform that operation.', [
                    'key' => 'authError',
                    'clear' => true,
                    'params' => [
                        'heading' => 'Error',
                        'class' => 'callout-danger',
                        'fa' => 'excl'
                    ]
                ]);

                return $this->redirect('/marketing/floorplans/floorplans_library');

            }
        } elseif ($this->request->is('GET')) {

            if (empty($this->request->query['ids'])) {
                $this->Flash->calloutFlash(
                    'Error - You must select at least one image to perform that operation.', [
                    'key' => 'authError',
                    'clear' => true,
                    'params' => [
                        'heading' => 'Error',
                        'class' => 'callout-danger',
                        'fa' => 'excl'
                    ]
                ]);
                return $this->redirect('/marketing/floorplans/floorplans_library');
            } else {
                // load delete fields
                $this->Customers = TableRegistry::get('Customers');

                $ids = $this->request->query['ids'];

                $ids = array_map(function ($x) {
                    return (int)$x;
                }, $ids);

                $customer = $this->Customers->find()
                    ->where(
                        [
                            'id' => $this->Auth->user('customer_id')
                        ]
                    )
                    ->contain(
                        [
                            'FloorplansLibrary' => function ($q) use ($ids) {
                                return $q->where(
                                    function ($exp, $q) use ($ids) {
                                        return $exp->in('id', $ids);
                                    }
                                );
                            }
                        ]
                    )
                    ->first();

                $this->set(compact('customer'));

            }


        } else {
            $this->Flash->calloutFlash(
                'Error - Invalid Request Method', [
                'key' => 'authError',
                'clear' => true,
                'params' => [
                    'heading' => 'Error',
                    'class' => 'callout-danger',
                    'fa' => 'excl'
                ]
            ]);

            return $this->redirect('/marketing/floorplans/floorplans_library');
        }

    }

    public function editFloorplansLibrary()
    {
        $this->Customers = TableRegistry::get('Customers');

        if ($this->request->is(['post', 'put'])) {
            if (!empty($this->request->data['action']) && $this->request->data['action'] === 'SAVE_IMAGES') {

                $ids = $this->request->query['ids'];

                $ids = array_map(function ($x) {
                    return (int)$x;
                }, $ids);

                $customer = $this->Customers->find()
                    ->where(
                        [
                            'id' => $this->Auth->user('customer_id')
                        ]
                    )->contain(
                        [
                            'FloorplansLibrary' => function ($q) use ($ids) {
                                return $q->where(
                                    function ($exp, $q) use ($ids) {
                                        return $exp->in('id', $ids);
                                    }
                                );
                            },
                            'FloorplansLibrary.FloorplansLibraryEdits'
                        ]
                    )
                    ->first();


                $customer = $this->Customers->patchEntity($customer, $this->request->data, [
                        'associated' => [
                            'FloorplansLibrary'
                        ]
                    ]
                );

                $r = $this->Customers->save($customer, [
                    'associated' => [
                        'FloorplansLibrary'
                    ]
                ]);

                if ($r) {

                    $this->Flash->calloutFlash(
                        'The images have been saved successfully.', [
                        'key' => 'authError',
                        'clear' => true,
                        'params' => [
                            'heading' => 'Images Saved',
                            'class' => 'callout-success',
                            'fa' => 'check'
                        ]
                    ]);

                    return $this->redirect('/marketing/floorplans/floorplans_library');

                } else {

                    $this->Flash->calloutFlash(
                        'Error - There was an error saving your changes.', [
                        'key' => 'authError',
                        'clear' => true,
                        'params' => [
                            'heading' => 'Error',
                            'class' => 'callout-danger',
                            'fa' => 'excl'
                        ]
                    ]);

                    $this->set(compact('customer'));

                }

            } elseif (!empty($this->request->data['ids'])) {
                $q = http_build_query($this->request->data);
                return $this->redirect('/marketing/floorplans/editFloorplansLibrary?' . $q);

            } else {
                $this->Flash->calloutFlash(
                    'Error - You must select at least one image to perform that operation.', [
                    'key' => 'authError',
                    'clear' => true,
                    'params' => [
                        'heading' => 'Error',
                        'class' => 'callout-danger',
                        'fa' => 'excl'
                    ]
                ]);

                return $this->redirect('/marketing/floorplans/floorplans_library');

            }
        } elseif ($this->request->is('GET')) {

            if (empty($this->request->query['ids'])) {
                $this->Flash->calloutFlash(
                    'Error - You must select at least one image to perform that operation.', [
                    'key' => 'authError',
                    'clear' => true,
                    'params' => [
                        'heading' => 'Error',
                        'class' => 'callout-danger',
                        'fa' => 'excl'
                    ]
                ]);
                return $this->redirect('/marketing/floorplans/floorplans_library');
            } else {

                $this->FloorplansLibrary = TableRegistry::get('FloorplansLibrary');

                // load edit fields

                $ids = $this->request->query['ids'];

                $ids = array_map(function ($x) {
                    return (int)$x;
                }, $ids);

                $customer = $this->Customers->find()
                    ->where(
                        [
                            'id' => $this->Auth->user('customer_id')
                        ]
                    )
                    ->contain(
                        [
                            'FloorplansLibrary' => function ($q) use ($ids) {
                                return $q->where(
                                    function ($exp, $q) use ($ids) {
                                        return $exp->in('id', $ids);
                                    }
                                );
                            },
                            'FloorplansLibrary.FloorplansLibraryEdits'
                        ]
                    )
                    ->first();

                $this->set(compact('customer'));

            }


        } else {
            $this->Flash->calloutFlash(
                'Error - Invalid Request Method', [
                'key' => 'authError',
                'clear' => true,
                'params' => [
                    'heading' => 'Error',
                    'class' => 'callout-danger',
                    'fa' => 'excl'
                ]
            ]);

            return $this->redirect('/marketing/floorplans/floorplans_library');
        }
    }


    public function floorplansLibrary($param = null, $search = null)
    {

        if (isset($this->request->query['ajax']) && $this->request->query['ajax'] == true) {
            if ($this->request->is('ajax')) {
                $this->viewBuilder()->layout('ajax_paging');
            }
        }
        if (isset($this->request->query['mdl'])) {
            if ($this->request->is('ajax')) {
                $this->viewBuilder()->layout('ajax_paging');
                $this->set('contentKey', $this->request->query['mdl']);
            }
        }

        $this->loadModel('FloorplansLibrary');

        if ($param === 'search' && strlen($search) > 0) {
            $conditions = [
                'OR' => [
                    'title LIKE' => '%' . $search . '%',
                    'description LIKE' => '%' . $search . '%'
                ]
            ];
        } else {
            $conditions = [];
        }

        $this->paginate = [
            'contain' => [],
            'order' => [
                'FloorplansLibrary.modified' => 'DESC'
            ],
            'conditions' => array_merge([
                'FloorplansLibrary.customer_id' => $this->Auth->user('customer_id')
            ], $conditions),
            'limit' => 24
        ];

        $this->set('library', $this->paginate($this->FloorplansLibrary));
        $this->set('_serialize', ['campaigns']);

        if (($param == 'refreshed' || $param == 'search') && $this->request->is('ajax')) {
            $this->viewBuilder()->layout('json_payload');
            $this->render('library_update');
        }

    }

    public function loadFloorplans($param = null, $search = null)
    {

        if (isset($this->request->query['media_type'])) {
            $mt = [$this->request->query['media_type']];
        } else {
            $mt = ['IMAGE', 'VIDEO', 'VECTOR'];
        }

        if (isset($this->request->query['ajax']) && $this->request->query['ajax'] == true) {
            if ($this->request->is('ajax')) {
                $this->viewBuilder()->layout('ajax_paging');
            }
        }
        if (isset($this->request->query['mdl'])) {
            if ($this->request->is('ajax')) {
                $this->viewBuilder()->layout('ajax_paging');
                $this->set('contentKey', $this->request->query['mdl']);
            }
        }

        $this->loadModel('FloorplansLibrary');

        if ($param === 'search' && strlen($search) > 0) {
            $conditions = [
                'OR' => [
                    'title LIKE' => '%' . $search . '%',
                    'description LIKE' => '%' . $search . '%'
                ],
                'media_type IN' => $mt
            ];
        } else {
            $conditions = ['media_type IN' => $mt];
        }

        $this->paginate = [
            'contain' => [],
            'order' => [
                'FloorplansLibrary.modified' => 'DESC'
            ],
            'conditions' => array_merge([
                'FloorplansLibrary.customer_id' => $this->Auth->user('customer_id')
            ], $conditions),
            'limit' => 8
        ];

        $this->set('library', $this->paginate($this->FloorplansLibrary));
        $this->set('_serialize', ['campaigns']);

        if (($param == 'refreshed' || $param == 'search') && $this->request->is('ajax')) {
            $this->viewBuilder()->layout('json_payload');
            $this->render('library_update');
        }

    }

    public function editContent($id = null)
    {
        $missingButtons = false;
        $missingActions = false;

        $content = $this->CampaignContent->get($id, [
            'conditions' => [
                'CampaignContent.customer_id' => $this->Auth->user('customer_id')
            ],
            'contain' => [
                'Customers.ParentCompany',
                'Users.Profiles',
                'MediaImages',
                'MediaVideos',
                'CampaignContentButtons.Videos',
                'CampaignContentActions.Videos',
            ],
        ]);

        if (!empty($content->media_video_id)) {
            $content->selected_video_media_path = $content->media_video->video_thumb;
            $content->selected_video_media_thumb_path = $content->media_video->video_sthumb;
        }

        if ($content->has('media_image')) {
            $content->selected_image_media_path = 'https://' . Configure::read('Settings.floorplans_container') . '/' . $content->media_image->path . $content->media_image->filename;
            $content->selected_image_media_thumb_path = 'https://' . Configure::read('Settings.floorplans_container') . '/' . $content->media_image->path . 'thumbnail-' . $content->media_image->filename;
        }

        if ($this->request->is(['put', 'post'])) {

            $this->request->data['customer_id'] = $this->Auth->user('customer_id');

            $valid = true;
            $actions = false;

            if (!empty($this->request->data['interaction_method'])) {
                if ($this->request->data['interaction_method'] === 'BUTTONS') {
                    unset($this->request->data['campaign_content_actions']);

                    if (!empty($this->request->data['campaign_content_buttons'])) {
                        foreach ($this->request->data['campaign_content_buttons'] as $button) {
                            if ($button['action'] !== 'NO_ACTION') {
                                $actions = true;
                            }
                        }

                        if (!$actions) {
                            $missingButtons = true;
                            $valid = false;
                        } else {
                            $missingButtons = false;
                        }

                    }

                } elseif ($this->request->data['interaction_method'] === 'TOUCH') {
                    unset($this->request->data['campaign_content_buttons']);

                    if (!empty($this->request->data['campaign_content_actions'])) {
                        foreach ($this->request->data['campaign_content_actions'] as $action) {
                            if ($action['action'] !== 'NO_ACTION') {
                                $actions = true;
                            }
                        }

                        if (!$actions) {
                            $missingActions = true;
                            $valid = false;
                        } else {
                            $missingActions = false;
                        }

                    }

                }
            }

            //force touch action property
            if(isset($this->request->data['campaign_content_actions'][1])) {

                $this->request->data['campaign_content_actions'][1]['type'] = 'ON_TOUCH';
            }


            $this->CampaignContent->patchEntity(
                $content,
                $this->request->data,
                [
                    'validate' => 'content',
                    'associated' => [
                        'CampaignContentButtons',
                        'CampaignContentActions'
                    ]
                ]
            );


            if ($valid) {
                $s = $this->CampaignContent->save($content, ['validate' => 'content']);

                if (!$s) {


                } else {

                    $this->Flash->calloutFlash(
                        'Content Updated Successfully', [
                        'key' => 'authError',
                        'clear' => true,
                        'params' => [
                            'heading' => 'Success',
                            'class' => 'callout-success',
                            'fa' => 'check'
                        ]
                    ]);

                    return $this->redirect('/marketing/content');

                }
            }


        }

        $this->loadModel('Surveys');
        $surveys = $this->Surveys->find('list')->where([
            'Surveys.customer_id IN' => $this->request->getSession()->read('multiple_customers'),
        ])->toArray();

        $this->set(compact('content', 'missingButtons', 'missingActions', 'surveys'));

        $this->viewBuilder()->setTemplate('form');
    }

    public function createContent()
    {
        $missingButtons = false;
        $missingActions = false;

        $content = $this->CampaignContent->newEntity();

        if ($this->request->is(['put', 'post'])) {

            $this->request->data['customer_id'] = $this->Auth->user('customer_id');

            $valid = true;
            $actions = false;

            if (isset($this->request->data['interaction_method']) && $this->request->data['interaction_method'] === 'SURVEY') {
                unset($this->request->data['campaign_content_actions']);
                unset($this->request->data['campaign_content_buttons']);
            }

            switch ($this->request->data) {
                case 'BUTTON':

                    unset($this->request->data['campaign_content_actions']);

                    foreach ($this->request->data['campaign_content_buttons'] as $button) {
                        if ($button['action'] !== 'NO_ACTION') {
                            $actions = true;
                        }
                    }

                    if (!$actions) {
                        $missingButtons = true;
                        $valid = false;
                    } else {
                        $missingButtons = false;
                    }

                    break;

                case 'TOUCH':

                    unset($this->request->data['campaign_content_buttons']);

                    foreach ($this->request->data['campaign_content_actions'] as $action) {
                        if ($action['action'] !== 'NO_ACTION') {
                            $actions = true;
                        }
                    }

                    if (!$actions) {
                        $missingActions = true;
                        $valid = false;
                    } else {
                        $missingActions = false;
                    }

                    break;

                case 'NONE':

                    unset($this->request->data['campaign_content_buttons']);
                    unset($this->request->data['campaign_content_actions']);

                    break;
            }


            $this->CampaignContent->patchEntity(
                $content,
                $this->request->data,
                [
                    'validate' => 'content',
                    'associated' => [
                        'CampaignContentButtons',
                        'CampaignContentActions'
                    ]
                ]
            );

            if ($valid) {
                Utils::getId($content, $this->request->data);
                $s = $this->CampaignContent->save($content, ['validate' => 'content']);

                if (!$s) {


                } else {

                    $this->Flash->calloutFlash(
                        'Content Created Successfully', [
                        'key' => 'authError',
                        'clear' => true,
                        'params' => [
                            'heading' => 'Success',
                            'class' => 'callout-success',
                            'fa' => 'check'
                        ]
                    ]);

                    return $this->redirect('/marketing/content');

                }
            }


        }

        $this->loadModel('Surveys');
        $surveys = $this->Surveys->find('list')->where([
            'Surveys.customer_id IN' => $this->request->getSession()->read('multiple_customers'),
        ])->toArray();

        $this->set(compact('content', 'missingButtons', 'missingActions', 'surveys'));

        $this->viewBuilder()->setTemplate('form');
    }

    public function uploadFloorplans()
    {

        $customerId = $this->Auth->user('customer_id');

        $ML = TableRegistry::get('FloorplansLibrary');

        $data = [];
        $s = [];

        if (array_key_exists('filename', $this->request->data)) {
            foreach ($this->request->data['filename'] as $file) {
                $tmpEntityData = ['filename' => $file, 'customer_id' => $customerId];
                $entity = $ML->newEntity($tmpEntityData);

                Utils::getId($entity);

                $save = $ML->save($entity);
                $s[] = [$save, $entity];
            }
        }

        $code = 200;
        $error = false;

        foreach ($s as $saved) {
            if (!$saved[0]) {
                $code = 140;
                $error = $saved[1]->errors();
            }
        }

        echo json_encode(['code' => $code, 'errors' => $error]);

        exit();

    }

    /**
     * Delete method
     * This does not delete the actual media library content
     *
     * @param string|null $id Location id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function deleteContent($id = null)
    {
        $this->Campaigns = TableRegistry::get('Campaigns');

        $content = $this->CampaignContent->get($id);

        if (in_array($content->customer_id, $this->request->getSession()->read('multiple_customers'))) {

            //check to see if there are any campaigns with this content
            $campaigns = $this->Campaigns->find('byContent', [
                'contentIds' => [$content->id],
            ])->toArray();

            if (!empty($campaigns)) {
                $this->Flash->calloutFlash(
                    "The content you are trying to delete is attached to the following campaigns.", [
                    'key' => 'authError',
                    'clear' => true,
                    'params' => [
                        'heading' => 'Content is attached to campaigns',
                        'class' => 'callout-info',
                        'fa' => 'check'                    ]
                ]);
                $this->set(compact('campaigns', 'content'));
                $this->render('delete_content');
                return $this->response;
            }

            if ($this->CampaignContent->delete($content)) {
                $this->Flash->calloutFlash(
                    "Deleted successfully - Images relating to this will remain.", [
                    'key' => 'authError',
                    'clear' => true,
                    'params' => [
                        'heading' => 'Content Deleted',
                        'class' => 'callout-success',
                        'fa' => 'check'
                    ]
                ]);
            } else {
                $this->Flash->calloutFlash(
                    'Error - Could not delete Content', [
                    'key' => 'authError',
                    'clear' => true,
                    'params' => [
                        'heading' => 'Error',
                        'class' => 'callout-danger',
                        'fa' => 'excl'
                    ]
                ]);

            }
        } else {
            $this->Flash->calloutFlash(
                'You do not have permission to delete that content', [
                'key' => 'authError',
                'clear' => true,
                'params' => [
                    'heading' => 'Error',
                    'class' => 'callout-danger',
                    'fa' => 'excl'
                ]
            ]);
        }
        return $this->redirect(['action' => 'index']);
    }

    /**
     * Confirms deletion
     *
     * @param null $id
     */
    public function confirmDelete()
    {
        $this->Campaigns = TableRegistry::get('Campaigns');
        $content = $this->CampaignContent->get($this->request->data['content_id']);

        if ($this->request->is(['post','put']) && !empty($this->request->data['agree_to_delete_content'])) {

            if (in_array($content->customer_id, $this->request->getSession()->read('multiple_customers'))) {
                $this->request->data['email'] = $this->Auth->user('email');
                $this->request->data['password'] = $this->request->data['verify_password'];

                if ($this->Auth->identify()) {

                    if ($deleted = $this->CampaignContent->delete($content)) {
                        $this->Flash->calloutFlash(
                            'Content deleted successfully.', [
                            'key' => 'authError',
                            'clear' => true,
                            'params' => [
                                'heading' => 'Success',
                                'class' => 'callout-success',
                                'fa' => 'check'
                            ]
                        ]);
                    } else {
                        $this->Flash->calloutFlash(
                            'Error deleting content, please try again', [
                            'key' => 'authError',
                            'clear' => true,
                            'params' => [
                                'heading' => 'Error',
                                'class' => 'callout-danger',
                                'fa' => 'excl'
                            ]
                        ]);
                    }
                } else {
                    $this->set('pwAuthError', true);

                    $this->Flash->calloutFlash(
                        'Incorrect password supplied', [
                        'key' => 'authError',
                        'clear' => true,
                        'params' => [
                            'heading' => 'Error',
                            'class' => 'callout-danger',
                            'fa' => 'excl'
                        ]
                    ]);


                }
            } else {
                $this->Flash->calloutFlash(
                    'You do not have permission to delete that content', [
                    'key' => 'authError',
                    'clear' => true,
                    'params' => [
                        'heading' => 'Error',
                        'class' => 'callout-danger',
                        'fa' => 'excl'
                    ]
                ]);
            }
        }

        return $this->redirect(['action' => 'index']);
    }
}
